//---------  Credentials --------//
var host = ""
var user = ""
var password = ""
var database = ""
//---------  End of Credentials --------//


//---------  Do not edit below this point --------//


var htmlencode = require('htmlencode').htmlEncode;

var Annotated = function() {};

Annotated.addToHead = function(params) {
    return '';
};

Annotated.addToBody = function(params) {
    return '<div class="annotated-example" data-id="' + htmlencode(params.name) + '"></div>';
};



Annotated.initialize = function(req, params, handlers, cb) {

    // Initialize the content package
    params.headContent += Annotated.addToHead(params);
    params.bodyContent += Annotated.addToBody(params);


    //-------------- Annotated Examples Section -----------------//
    console.log(htmlencode(params.name));
    var mysql = require('mysql');

    var conn = mysql.createConnection({
            host: host,
            user: user,
            password: password,
            database: database
        }
    );

    //Records with code and comments
    var queryString = "SELECT l.Code AS code, l.Comment AS comment, l.LineIndex AS LNo "
        + "FROM webex21.ent_line l "
        + "JOIN webex21.ent_dissection d ON(l.DissectionID=d.DissectionID) "
        + "WHERE d.rdfID ='" + htmlencode(params.name) + "' ORDER BY LNo ASC;";


    conn.query(queryString, function (error,rows,fields)
        {
            if(error)
            {
                throw error;
            }
            else
            {
                var data = JSON.stringify(rows);
                data = JSON.parse(data);
                //console.log(data[0].code);
                //console.log('\n');

                conn.end();


                var annotated = {};
                var lines = [];
                var language = "Python 3.x";
                var author = "Hardik Vasa";
                var rdfid = htmlencode(params.name);
                var title = htmlencode(params.name);
                annotated[title] = {}
                annotated[title].language = language;
                annotated[title].author = author;
                annotated[title].lines = [];

                for(var i = 0; i < data.length; i++) {
                    annotated[title].lines.push({"line": data[i].code, "comment": data[i].comment});
                }
                //console.log(annotated[title].lines);



                var initializeAsync = function(params, cb) {

                    var addData = function() {



                        params.headContent += '<script type="text/javascript">\n' +
                            'window.annotated ='+ JSON.stringify(annotated) + '\n'+'</script>';
                        //console.log(params.headContent);

                    };
                    var body = '';
                    body += addData();
                    //console.log('addData: '+body);
                    //cb();
                };

                initializeAsync(params, cb);

                cb();

            }
        }
    )

};

Annotated.register = function(handlers) {
    handlers.contentPackages['annotated-demo'] = Annotated;
    handlers.contentTypes.annotated.installedContentPackages.push(Annotated);

    handlers.contentPackages['annotated-java'] = Annotated;
    handlers.contentTypes.annotated.installedContentPackages.push(Annotated);

    handlers.contentPackages['annotated-python'] = Annotated;
    handlers.contentTypes.annotated.installedContentPackages.push(Annotated);

    handlers.contentPackages['annotated-sql'] = Annotated;
    handlers.contentTypes.annotated.installedContentPackages.push(Annotated);

    handlers.contentPackages['annotated-c'] = Annotated;
    handlers.contentTypes.annotated.installedContentPackages.push(Annotated);

    handlers.contentPackages['annotated-cpp'] = Annotated;
    handlers.contentTypes.annotated.installedContentPackages.push(Annotated);

    handlers.contentPackages['annotated-vb'] = Annotated;
    handlers.contentTypes.annotated.installedContentPackages.push(Annotated);
};

Annotated.namespace = 'annotated-demo';
Annotated.contentTypeNamespace = 'annotated';






////-------------- Content Brokering Section -----------------//

var mysql = require('mysql');

var conn2 = mysql.createConnection({
    host: host,
    user: user,
    password: password,
    database: database
    }
);

//Records with code and comments
var queryString_java = "SELECT webex21.ent_dissection.rdfID as rdfid, webex21.ent_dissection.Name as title, webex21.ent_dissection.Author as author, webex21.ent_dissection.domain, webex21.ent_line.Code AS code, webex21.ent_line.Comment AS comment, webex21.ent_line.LineIndex AS line "
    + "FROM webex21.ent_dissection,webex21.ent_line,webex21.rel_dissection_privacy "
    + "WHERE webex21.ent_line.DissectionID=webex21.ent_dissection.DissectionID "
    + "AND webex21.ent_dissection.DissectionID=webex21.rel_dissection_privacy.DissectionID "
    + "AND webex21.rel_dissection_privacy.privacy = 1;"

conn2.query(queryString_java, function (error,rows,fields) {
    if (error) {
        throw error;
    }
    else {
        var data = JSON.stringify(rows);
        data = JSON.parse(data);
        //console.log(data);
        //console.log('\n');

        conn2.end();

        var annotated_java = {};
        var annotated_py = {};
        var annotated_sql = {};
        var annotated_c = {};
        var annotated_cpp = {};
        var annotated_vb = {};

        var prev_rdfid = "";
        var subitems = [];
        for(var i = 0; i < data.length; i++) {
            var rdfid = data[i].rdfid;
            var line = data[i].line;
            var domain = data[i].domain
            //console.log(domain);

            if (domain == 'java'){
                if (line == "1")
                {
                    var rdfid = data[i].rdfid;
                    var title = data[i].title;
                    var author = data[i].author;
                    annotated_java[rdfid] = {};
                    annotated_java[rdfid].title = title;
                    annotated_java[rdfid].description = 'This is an example';
                    annotated_java[rdfid].author = author;
                    annotated_java[rdfid].version = '0.1';
                    annotated_java[rdfid].created = '2015-11-15 00:00:00';
                    annotated_java[rdfid].modified = '2016-02-15 00:00:00';
                    annotated_java[rdfid].keywords = [title,'annotated example'];
                    annotated_java[rdfid].subitems = [];
                    annotated_java[rdfid].subitems.push({"code":data[i].code,"comment":data[i].comment,"line":data[i].line});
                }
                else
                {
                    //add code lines and comments to existing object in windows.annotated
                    try
                    {
                        annotated_java[rdfid].subitems.push({"code":data[i].code,"comment":data[i].comment,"line":data[i].line});
                    }
                    catch(err)
                    {
                        continue;
                    }
                }
                prev_rdfid = rdfid;
            } //End Java

            else if (domain == 'py'){
                if (line == "1")
                {
                    var rdfid = data[i].rdfid;
                    var title = data[i].title;
                    var author = data[i].author;
                    annotated_py[rdfid] = {};
                    annotated_py[rdfid].title = title;
                    annotated_py[rdfid].description = 'This is an example';
                    annotated_py[rdfid].author = author;
                    annotated_py[rdfid].version = '0.1';
                    annotated_py[rdfid].created = '2015-11-15 00:00:00';
                    annotated_py[rdfid].modified = '2016-02-15 00:00:00';
                    annotated_py[rdfid].keywords = [title,'annotated example'];
                    annotated_py[rdfid].subitems = [];
                    annotated_py[rdfid].subitems.push({"code":data[i].code,"comment":data[i].comment,"line":data[i].line});
                }
                else
                {
                    //add code lines and comments to existing object in windows.annotated
                    try
                    {
                        annotated_py[rdfid].subitems.push({"code":data[i].code,"comment":data[i].comment,"line":data[i].line});
                    }
                    catch(err)
                    {
                        continue;
                    }
                }
                prev_rdfid = rdfid;
            } //End Py



            else if (domain == 'sql'){
                if (line == "1")
                {
                    var rdfid = data[i].rdfid;
                    var title = data[i].title;
                    var author = data[i].author;
                    annotated_sql[rdfid] = {};
                    annotated_sql[rdfid].title = title;
                    annotated_sql[rdfid].description = 'This is an example';
                    annotated_sql[rdfid].author = author;
                    annotated_sql[rdfid].version = '0.1';
                    annotated_sql[rdfid].created = '2015-11-15 00:00:00';
                    annotated_sql[rdfid].modified = '2016-02-15 00:00:00';
                    annotated_sql[rdfid].keywords = [title,'annotated example'];
                    annotated_sql[rdfid].subitems = [];
                    annotated_sql[rdfid].subitems.push({"code":data[i].code,"comment":data[i].comment,"line":data[i].line});
                }
                else
                {
                    //add code lines and comments to existing object in windows.annotated
                    try
                    {
                        annotated_sql[rdfid].subitems.push({"code":data[i].code,"comment":data[i].comment,"line":data[i].line});
                    }
                    catch(err)
                    {
                        continue;
                    }
                }
                prev_rdfid = rdfid;
            } //End sql



            else if (domain == 'c'){
                if (line == "1")
                {
                    var rdfid = data[i].rdfid;
                    var title = data[i].title;
                    var author = data[i].author;
                    annotated_c[rdfid] = {};
                    annotated_c[rdfid].title = title;
                    annotated_c[rdfid].description = 'This is an example';
                    annotated_c[rdfid].author = author;
                    annotated_c[rdfid].version = '0.1';
                    annotated_c[rdfid].created = '2015-11-15 00:00:00';
                    annotated_c[rdfid].modified = '2016-02-15 00:00:00';
                    annotated_c[rdfid].keywords = [title,'annotated example'];
                    annotated_c[rdfid].subitems = [];
                    annotated_c[rdfid].subitems.push({"code":data[i].code,"comment":data[i].comment,"line":data[i].line});
                }
                else
                {
                    //add code lines and comments to existing object in windows.annotated
                    try
                    {
                        annotated_c[rdfid].subitems.push({"code":data[i].code,"comment":data[i].comment,"line":data[i].line});
                    }
                    catch(err)
                    {
                        continue;
                    }
                }
                prev_rdfid = rdfid;
            } //End C


            else if (domain == 'cpp'){
                if (line == "1")
                {
                    var rdfid = data[i].rdfid;
                    var title = data[i].title;
                    var author = data[i].author;
                    annotated_cpp[rdfid] = {};
                    annotated_cpp[rdfid].title = title;
                    annotated_cpp[rdfid].description = 'This is an example';
                    annotated_cpp[rdfid].author = author;
                    annotated_cpp[rdfid].version = '0.1';
                    annotated_cpp[rdfid].created = '2015-11-15 00:00:00';
                    annotated_cpp[rdfid].modified = '2016-02-15 00:00:00';
                    annotated_cpp[rdfid].keywords = [title,'annotated example'];
                    annotated_cpp[rdfid].subitems = [];
                    annotated_cpp[rdfid].subitems.push({"code":data[i].code,"comment":data[i].comment,"line":data[i].line});
                }
                else
                {
                    //add code lines and comments to existing object in windows.annotated
                    try
                    {
                        annotated_cpp[rdfid].subitems.push({"code":data[i].code,"comment":data[i].comment,"line":data[i].line});
                    }
                    catch(err)
                    {
                        continue;
                    }
                }
                prev_rdfid = rdfid;
            } //End cpp


            else if (domain == 'vb'){
                if (line == "1")
                {
                    var rdfid = data[i].rdfid;
                    var title = data[i].title;
                    var author = data[i].author;
                    annotated_vb[rdfid] = {};
                    annotated_vb[rdfid].title = title;
                    annotated_vb[rdfid].description = 'This is an example';
                    annotated_vb[rdfid].author = author;
                    annotated_vb[rdfid].version = '0.1';
                    annotated_vb[rdfid].created = '2015-11-15 00:00:00';
                    annotated_vb[rdfid].modified = '2016-02-15 00:00:00';
                    annotated_vb[rdfid].keywords = [title,'annotated example'];
                    annotated_vb[rdfid].subitems = [];
                    annotated_vb[rdfid].subitems.push({"code":data[i].code,"comment":data[i].comment,"line":data[i].line});
                }
                else
                {
                    //add code lines and comments to existing object in windows.annotated
                    try
                    {
                        annotated_vb[rdfid].subitems.push({"code":data[i].code,"comment":data[i].comment,"line":data[i].line});
                    }
                    catch(err)
                    {
                        continue;
                    }
                }
                prev_rdfid = rdfid;
            } //End vb



            else {
                //console.log('error!');
            } //Error


        }

        //console.log(annotated);



        Annotated.meta = {
            'name': 'annotated-demo',
            'c': 'annotated-c',
            'cpp': 'annotated-cpp',
            'vb': 'annotated-vb',
            'java': 'annotated-java',
            'python': 'annotated-python',
            'sql': 'annotated-sql',
            'title': 'Annotated Examples',
            'shortDescription': 'A demonstration for annotated examples with comments.',
            'description': '',
            'author': 'PAWS Lab',
            'license': 'MIT',
            'version': '0.1',
            'created': '2015-08-05 13:26:48',
            'modified': '2015-08-05 13:26:48',
            'keywords': ['webex', 'annotated', 'examples'],
            'url': '',
            'teaserContent' : ['demo'],
            'contents2': {
                'demo': {
                    'description': '',
                    'order': 0,
                    'title': 'Demo'
                }
            }
        };

        Annotated.meta.annotated_java = annotated_java;
        Annotated.meta.annotated_python = annotated_py;
        Annotated.meta.annotated_sql = annotated_sql;
        Annotated.meta.annotated_c = annotated_c;
        Annotated.meta.annotated_cpp = annotated_cpp;
        Annotated.meta.annotated_vb = annotated_vb;
        //console.log(annotated_py);


    }
});




module.exports = Annotated;



/*
// ****** Front-end Interface ******
//mysql queries
var mysql = require('mysql');

var conn = mysql.createConnection({
     host: host,
     user: user,
     password: password,
     database: database
    }
);

//Records with code and comments
var queryString = "SELECT aggregate.ent_topic.display_name AS topic_name,aggregate.rel_topic_content.display_name AS rdf_id,webex21.ent_dissection.Name AS ex_name,webex21.ent_line.LineIndex AS line_number,webex21.ent_line.Code as code,webex21.ent_line.Comment AS comment " +
    "FROM aggregate.ent_topic,aggregate.rel_topic_content,aggregate.rel_resource_provider,webex21.ent_dissection,webex21.ent_line " +
    "WHERE aggregate.ent_topic.topic_id = aggregate.rel_topic_content.topic_id " +
    "AND aggregate.rel_topic_content.resource_id = aggregate.rel_resource_provider.resource_id " +
    "AND aggregate.ent_topic.domain = 'java' " +
    "AND aggregate.rel_resource_provider.provider_id = 'webex' " +
    "AND aggregate.rel_topic_content.display_name = webex21.ent_dissection.rdfID " +
    "AND webex21.ent_dissection.DissectionID = webex21.ent_line.DissectionID";
conn.query(queryString, function (error,results)
    {
        if(error)
        {
            throw error;
        }
        else
        {
            Annotated.big = results;
            var abc = (Annotated.big)
            //console.log(abc);
        }
    }
)



//Topic Names
var queryString2 = "SELECT display_name AS topic_name FROM aggregate.ent_topic WHERE domain = 'py';"
conn.query(queryString2, function (error,results2)
    {
        if(error)
        {
            throw error;
        }
        else
        {
            Annotated.title2 = results2;
            //console.log(Annotated.title2);
        }
    }
)
//records to create the smaller object
var queryString3 = "SELECT aggregate.ent_topic.display_name AS topic_name,aggregate.rel_topic_content.display_name AS rdf_id,webex21.ent_dissection.Name AS ex_name " +
    "FROM aggregate.ent_topic,aggregate.rel_topic_content,aggregate.rel_resource_provider,webex21.ent_dissection " +
    "WHERE aggregate.ent_topic.topic_id = aggregate.rel_topic_content.topic_id " +
    "AND aggregate.rel_topic_content.resource_id = aggregate.rel_resource_provider.resource_id " +
    "AND aggregate.ent_topic.domain = 'py' " +
    "AND aggregate.rel_resource_provider.provider_id = 'webex' " +
    "AND aggregate.rel_topic_content.display_name = webex21.ent_dissection.rdfID";
conn.query(queryString3, function (error,results3)
    {
        if(error)
        {
            throw error;
        }
        else
        {
            Annotated.title3 = results3;
            //console.log(Annotated.title3);

            var list1 = {};
            var list2 = [];

            Annotated.title3 = results3;

            var previous = ''
            for (i =0; i < Annotated.title3.length; i++)
            {
                var record = Annotated.title3[i];  //entire record
                var topic_name = record.topic_name;   //extracting topic name from record


                if (topic_name != previous)
                {
                    list1[topic_name] = [];
                    previous = topic_name;
                    var example_name = record.ex_name;
                    var rdfid = record.rdf_id;
                    list1[topic_name].push(rdfid);

                    //list1[topic_name].push(rdfid)
                    list2.push(topic_name);
                }
                else
                {
                    var example_name = record.ex_name;
                    var rdfid = record.rdf_id;
                    list1[topic_name].push(rdfid);
                }

            }
            Annotated.meta2 = list1
            //console.log(Annotated.meta2);
            Annotated.title2 = list2;
            //console.log(Annotated.title2);

        }
    }
)
conn.end();
*/